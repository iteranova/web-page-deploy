---
interface Props {
  lang: string;
  logo?: string;
  fontFamily?: string;
  baseUrl?: string;
}

const { lang, logo, fontFamily = 'font-bold', baseUrl = '' } = Astro.props;

const navItems = 
  lang === 'en'
    ? [
        { href: `${baseUrl}#home`, label: 'Home' },
        { href: `${baseUrl}#about`, label: 'About' },
        { href: `${baseUrl}#services`, label: 'Services' },
        { href: `${baseUrl}#process`, label: 'Our Process' },
        { href: `${baseUrl}#whychooseus`, label: 'Why Us' },
        { href: `${baseUrl}#contact`, label: 'Contact' },
      ]
    : lang === 'de'
    ? [
        { href: `${baseUrl}#home`, label: 'Startseite' },
        { href: `${baseUrl}#about`, label: 'Über uns' },
        { href: `${baseUrl}#services`, label: 'Dienstleistungen' },
        { href: `${baseUrl}#process`, label: 'Unser Prozess' },
        { href: `${baseUrl}#whychooseus`, label: 'Warum wir' },
        { href: `${baseUrl}#contact`, label: 'Kontakt' },
      ]
    : [
        { href: `${baseUrl}#home`, label: 'Domov' },
        { href: `${baseUrl}#about`, label: 'O nas' },
        { href: `${baseUrl}#services`, label: 'Storitve' },
        { href: `${baseUrl}#process`, label: 'Naš proces' },
        { href: `${baseUrl}#whychooseus`, label: 'Zakaj mi' },
        { href: `${baseUrl}#contact`, label: 'Kontakt' },
      ];

const languages = [
  { code: 'en', label: 'EN', fullLabel: 'English', url: '/' },
  { code: 'de', label: 'DE', fullLabel: 'Deutsch', url: '/de' },
  { code: 'sl', label: 'SL', fullLabel: 'Slovenščina', url: '/sl' },
];

const currentLanguage = languages.find(l => l.code === lang) || languages[0];
---

<nav class="fixed top-0 w-full bg-white shadow-md z-50 transition-all duration-300">
  <div class="max-w-7xl mx-auto px-5">
    <div class="flex justify-between items-center py-4">
      <div class="flex-shrink-0">
        <a href={`${baseUrl}#home`} class="flex items-center gap-3">
          {logo && (
            <img src={logo} alt="IteraNova Logo" class="h-10 w-10 object-contain" />
          )}
          <h1 class={`text-3xl ${fontFamily}`}>
            <span class="font-normal text-primary-dark1">Itera</span><span class="font-bold text-primary-dark2">Nova</span>
          </h1>
        </a>
      </div>

      {/* Desktop Navigation */}
      <ul class="hidden md:flex gap-8 items-center list-none">
        {navItems.map((item) => (
          <li>
            <a
              href={item.href}
              class="text-gray-600 hover:text-primary transition-colors duration-300 font-medium"
            >
              {item.label}
            </a>
          </li>
        ))}
        <li class="relative language-dropdown">
          <button
            class="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary-dark transition-all duration-300 flex items-center gap-2"
            id="language-button"
            aria-haspopup="true"
            aria-expanded="false"
          >
            {currentLanguage.label}
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </button>
          <div
            class="absolute right-0 mt-2 w-40 bg-white rounded-md shadow-lg hidden"
            id="language-menu"
            role="menu"
            aria-orientation="vertical"
            aria-labelledby="language-button"
          >
            {languages.map((language) => (
              <a
                href={language.url}
                class={`block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors ${language.code === lang ? 'bg-gray-50 font-semibold' : ''}`}
                role="menuitem"
              >
                {language.fullLabel}
              </a>
            ))}
          </div>
        </li>
      </ul>

      {/* Mobile Hamburger Button */}
      <button
        id="mobile-menu-button"
        class="md:hidden flex flex-col justify-center items-center w-10 h-10 space-y-1.5"
        aria-label="Toggle menu"
        aria-expanded="false"
      >
        <span class="block w-6 h-0.5 bg-gray-600 transition-all duration-300"></span>
        <span class="block w-6 h-0.5 bg-gray-600 transition-all duration-300"></span>
        <span class="block w-6 h-0.5 bg-gray-600 transition-all duration-300"></span>
      </button>
    </div>

    {/* Mobile Menu */}
    <div
      id="mobile-menu"
      class="md:hidden hidden overflow-hidden"
    >
      <ul class="flex flex-col py-4 space-y-2">
        {navItems.map((item) => (
          <li>
            <a
              href={item.href}
              class="block py-2 text-gray-600 hover:text-primary hover:bg-gray-50 transition-colors duration-300 font-medium"
            >
              {item.label}
            </a>
          </li>
        ))}
        <li class="pt-2 border-t border-gray-200">
          <div class="flex gap-2">
            {languages.map((language) => (
              <a
                href={language.url}
                class={`px-3 py-2 rounded-md text-sm transition-colors ${language.code === lang ? 'bg-primary text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}
              >
                {language.label}
              </a>
            ))}
          </div>
        </li>
      </ul>
    </div>
  </div>
</nav>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Desktop language dropdown
    const button = document.getElementById('language-button');
    const menu = document.getElementById('language-menu');
    
    if (button && menu) {
      button.addEventListener('click', (e) => {
        e.stopPropagation();
        const isHidden = menu.classList.contains('hidden');
        menu.classList.toggle('hidden');
        button.setAttribute('aria-expanded', isHidden ? 'true' : 'false');
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', () => {
        menu.classList.add('hidden');
        button.setAttribute('aria-expanded', 'false');
      });
      
      // Prevent dropdown from closing when clicking inside
      menu.addEventListener('click', (e) => {
        e.stopPropagation();
      });
    }

    // Mobile menu toggle
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', () => {
        const isHidden = mobileMenu.classList.contains('hidden');
        mobileMenu.classList.toggle('hidden');
        mobileMenuButton.setAttribute('aria-expanded', isHidden ? 'true' : 'false');
        
        // Animate hamburger icon
        const spans = mobileMenuButton.querySelectorAll('span');
        if (isHidden) {
          spans[0].style.transform = 'rotate(45deg) translateY(8px)';
          spans[1].style.opacity = '0';
          spans[2].style.transform = 'rotate(-45deg) translateY(-8px)';
        } else {
          spans[0].style.transform = 'rotate(0) translateY(0)';
          spans[1].style.opacity = '1';
          spans[2].style.transform = 'rotate(0) translateY(0)';
        }
      });
      
      // Close mobile menu when clicking on a link
      const mobileLinks = mobileMenu.querySelectorAll('a');
      mobileLinks.forEach(link => {
        link.addEventListener('click', () => {
          mobileMenu.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
          
          // Reset hamburger icon
          const spans = mobileMenuButton.querySelectorAll('span');
          spans[0].style.transform = 'rotate(0) translateY(0)';
          spans[1].style.opacity = '1';
          spans[2].style.transform = 'rotate(0) translateY(0)';
        });
      });
    }
  });
</script>
